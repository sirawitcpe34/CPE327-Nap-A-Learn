import Head from "next/head";
import { Heading, Wrap, WrapItem, Box, Table, Tbody, Tr, Td, TableContainer, Flex } from '@chakra-ui/react';
import Layout from "../../components/Layout";
import Colour from "../../color/napalearncolor";
import { useEffect, useState } from 'react';
import axios from 'axios';
import { FiChevronRight, FiChevronLeft, FiChevronsRight, FiChevronsLeft } from "react-icons/fi";
import { encode } from 'js-base64';
import { BiSearchAlt } from "react-icons/bi";
import { useRouter } from 'next/router';
import Pagination from '../../components/Pagination';
import Search from '../../components/Search';
import url from '../url';

export default () => {
    const router = useRouter()
    const [article, setarticle] = useState([])
    const [page, setPage] = useState(1)
    const [pageAmount, setPageAmount] = useState(1)
    const [search, setSearch] = useState('')

    // fetch data article and search
    const fetchData = async () => {
        let result = await axios.get(`${url}/api/ProfesstionArticle/getProfesstionArticle`, {
            headers: {
                page: page,
                search: encode(search),
            }
        })
        setarticle(result.data)
        if (result.data.length !== 0) {
            setPageAmount(result.data[0].page_amount)
        }
    }

    // fetch data when search, page change
    useEffect(() => {
        fetchData()
    }, [search, page])

    const onClickArticle = (id) => {
        router.push(`/professional/professionalarticleID/${id}`)
    }

    let menu = {
        bgColor: Colour.White,
        width: '1100px',
        marginTop: '10px',
        padding: "0px 0px 0px 0px",
    }
    let boxImage = {
        width: '150px',
    }
    let boxText = {
        whiteSpace: "pre",
        width: "800px",
        overflow: "hidden",
    }
    let boxPagination = {
        width: '1100px',
        marginTop: '25px',
    }
    let searchbox = {
        width: '1100px',
    }

    return (
        <div>
            <Head>
                <title>Nap A Learn Website</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/pro.ico" />
            </Head>
            <Layout>
                <div className="p-4 mt-1">
                    <Wrap align='center' justify='center' spacingX='50px' spacingY='12px'>
                        <Box sx={searchbox}>  {/* searchbox */}
                            <Search icon={<BiSearchAlt />} onChange={(e) => { setSearch(e.target.value); setPage(1) }} />
                        </Box>
                        <WrapItem>
                            <Box sx={menu} boxShadow='lg' p='6' rounded='md'>
                                <Heading size='xl' color="#3E3C6E" marginLeft='20px' marginTop='20px'>Professional Article</Heading>
                                <TableContainer marginTop='20px' >
                                    <Table variant='striped' colorScheme='gray'>
                                        <Tbody> {/* show All Article */}
                                            {
                                                article.map((item, index) => {
                                                    return (
                                                        <Tr key={index}
                                                            _hover={{ color: Colour.FirstPink }}
                                                            onClick={() => onClickArticle(item.professarticleID)}>
                                                            <Td>
                                                                <Box sx={boxImage}>
                                                                    <img src={item.url}></img>
                                                                </Box>
                                                            </Td>
                                                            <Td >
                                                                <Box sx={boxText}>
                                                                    <Heading size='md'>{item.topic}</Heading>
                                                                    <Heading size='xs' opacity='0.75' noOfLines={2}>{item.content}</Heading>
                                                                </Box>
                                                            </Td>
                                                        </Tr>
                                                    )
                                                })
                                            }
                                        </Tbody>
                                    </Table>
                                </TableContainer>
                            </Box>
                        </WrapItem>
                    </Wrap> {/* show Pagination */}
                    <Flex align="center" justify="center" m={6}>
                        <Box sx={boxPagination}>
                            <Flex align="center" justify="center" gap="10">
                                <Pagination text="First Page" disabled={page === 1} icon={<FiChevronsLeft />}
                                    page={() => { setPage(1) }} />
                                <Pagination text="Prev Page" disabled={page === 1} icon={<FiChevronLeft />}
                                    page={() => { if (page > 1) setPage(page - 1) }} />
                                <center>
                                    <Heading size='md' color="#3E3C6E">Page {page} of {pageAmount}</Heading>
                                </center>
                                <Pagination text="Next Page" disabled={page === parseInt(pageAmount)} icon2={<FiChevronRight />}
                                    page={() => { if (page < pageAmount) setPage(page + 1) }} />
                                <Pagination text="Last Page" disabled={page === parseInt(pageAmount)} icon2={<FiChevronsRight />}
                                    page={() => { setPage(parseInt(pageAmount)) }} />
                            </Flex>
                        </Box>
                    </Flex>
                </div>
            </Layout>
        </div>
    )
}
